{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","concat","flip","aria-label","onClick","imageClickEvent","id","alt","name","src","image","Wrapper","children","Title","Score","score","highScore","App","state","characters","shuffle","i","length","j","Math","floor","random","placeholder","correctChoiceLogic","newCharacters","_this$state","_this","newScore","newHighScore","max","setState","incorrectChoiceLogic","resetCharacters","map","Object","objectSpread","clicked","correct","newImage","this","_this2","components_Wrapper","Grid_default","Row_default","Col_default","md","components_Title","components_Score","character","xs","components_CharacterCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.820b7676.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CharacterCard(props) {\r\n  return (\r\n    <div className={`card${props.flip ? \" flip \" : \"\"}`} aria-label=\"card\" onClick={() => props.imageClickEvent(props.id)}>\r\n      <div className=\"img-container btn\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title text-center\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Score(props) {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-5 score\">Score: {props.score}</div>\r\n      <div className=\"col-md-2\"></div>\r\n      <div className=\"col-md-5 score\">High Score: {props.highScore}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Score;","import React, { Component } from \"react\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Grid from \"react-bootstrap/lib/Grid\";\nimport Row from \"react-bootstrap/lib/Row\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport Title from \"./components/Title\";\nimport Score from \"./components/Score\";\nimport characters from \"./characters.json\";\n\n\nclass App extends Component {\n  // Setting this.state.characters to the characters json array\n  state = {\n    characters,\n    score: 0,\n    highScore: 0\n  };\n\n  componentDidMount(){\n    this.setState({\n      characters: this.shuffle(this.state.characters)\n    });\n  }\n  \n  //Logic for shuffling the cards\n  shuffle = characters => {\n    let i = characters.length -1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i +1));\n      const placeholder = characters[i];\n      characters[i] = characters[j];\n      characters[j] = placeholder;\n      i--;\n    }\n    return characters;\n  };\n\n  correctChoiceLogic = newCharacters => {\n    const {highScore, score } = this.state;\n    const newScore = score +1;\n    const newHighScore = Math.max(newScore, highScore);\n\n    this.setState({\n        characters: this.shuffle(newCharacters),\n        score: newScore,\n        highScore: newHighScore\n    });\n};\n\nincorrectChoiceLogic = characters => {\n  this.setState({\n      characters: this.resetCharacters(characters),\n      score: 0\n  });\n};\n\nresetCharacters = characters => {\n  const resetCharacters = characters.map(image => ({ ...image, clicked: false}))\n  return this.shuffle(resetCharacters);\n};\n\nimageClickEvent = (id) => {\n  let correct = false;\n  const newCharacters = this.state.characters.map(image => {\n      const newImage = { ...image };\n      if (newImage.id === id) {\n          if (!newImage.clicked) {\n              newImage.clicked = true;\n              correct = true;\n          }\n      }\n      return newImage;\n  })\n  correct\n  ? this.correctChoiceLogic(newCharacters)\n  : this.incorrectChoiceLogic(newCharacters);\n};\n\n\n  // Map over this.state.characters and render a CharacterCard component for each character object\n  render() {\n    return (\n      <Wrapper>\n        <Grid>\n          <Row>\n            <Col md={12}>\n              <Title>Super Smash Bros. Memory</Title>\n            </Col>\n          </Row>\n          <Row>\n            <Col md={12}>\n              <Score score={this.state.score} highScore={this.state.highScore}>\n              </Score>\n            </Col>\n          </Row>\n          <Row>\n            {this.state.characters.map(character => (\n              <Col xs={6} md={3}>\n                <CharacterCard\n                  imageClickEvent={this.imageClickEvent}\n                  id={character.id}\n                  key={character.id}\n                  name={character.name}\n                  image={character.image}\n                  clicked={character.clicked}\n                />\n              </Col>\n              ))}\n          </Row>\n        </Grid>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}